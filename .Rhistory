aes(y=Fruity)+
geom_boxplot()
plot_grid(g1,g2,g3)
library(gridExtra)
g1 <-  ggplot(experts)+
aes(y=Spicy)+
geom_boxplot()
g2 <-  ggplot(experts)+
aes(y=Heady)+
geom_boxplot()
g3 <-  ggplot(experts)+
aes(y=Fruity)+
geom_boxplot()
grid.arrange(g1,g2,g3)
grid.arrange(g1,g2,g3, nrow=1, ncol=3)
p50
ggplot(experts) +
aes(x=Vanilla, fill=Product) +
geom_density(alpha=0.5)  +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
d<-density(experts$Vanilla)
# Plot the line
plot(d, main="Vanilla distribution and median")
p50 <- which.max(cumsum(d$y/sum(d$y)) >= 0.50)
# Plot the shading
polygon(c(-5, d$x[1:p50], d$x[p50]), c(0, d$y[1:p50], 0), col = 'lightblue')
ggplot(experts)+
aes(x=Vanilla)+
geom_density()
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
scale_x_log10()
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=mean(Spicy))
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=mean(Vanilla))
for (a in 5:16){
me <- mean(experts[,a])
sd <- sqrt(var(experts[,a]))
med <- quantile(experts[,a], 0.5)
q1 <- quantile(experts[,a], 0.25)
q3 <- quantile(experts[,a], 0.75)
descriptors <- rbind(descriptors, c(me, sd, med, q1, q3))
}
View(descriptors)
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=descriptor[Vanilla, mean])
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=descriptors[Vanilla, mean])
mean_vanilla <- mean(experts$Vanilla)
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=mean_vanilla)
mean_vanilla <- mean(experts$Vanilla)
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=mean_vanilla)+
geom_text(aes(x=mean_vanilla, label=paste0("Mean\n",mean_Vanilla), y=1.9))
mean_vanilla <- mean(experts$Vanilla)
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=mean_vanilla)+
geom_text(aes(x=mean_vanilla, label=paste0("Mean\n",mean_vanilla), y=1.9))
mean_vanilla <- mean(experts$Vanilla)
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=mean_vanilla)+
geom_text(aes(x=mean_vanilla, label=paste0("Mean\n",mean_vanilla)))
mean_vanilla <- mean(experts$Vanilla)
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=mean_vanilla)
q1 <- quantile(experts$Vanilla, 0.25)
q2 <- quantile(experts$Vanilla, 0.75)
ggplot(experts)+
aes(x=Vanilla)+
geom_density()+
geom_vline(xintercept=q1)+
geom_vline(xintercept=q2)
d<-density(experts$Vanilla)
# Plot the line
plot(d, main="Vanilla Distribution and quantiles")
q25 <- which.max(cumsum(d$y/sum(d$y)) >= 0.25)
q95 <- which.max(cumsum(d$y/sum(d$y)) >= 0.95)
# Plot the shading
polygon(c(-5, d$x[1:q25], d$x[q25]), c(0, d$y[1:q25], 0), col = 'lightblue')
polygon(c(d$x[q95], d$x[d$x > d$x[q95]], 15),c(0, d$y[d$x > d$x[q95]], 0),col = "lightblue")
# Plot the vline for mean
abline(v=mean(experts$Vanilla))
text(mean(experts$Vanilla),0.2, "mean", pos=2)
# Plot the vline for Q97.5
abline(v=d$x[q95])
text(d$x[q95],0.2, "Q97.5", pos=2)
# Plot the vline for Q0.25
abline(v=d$x[q25])
text(d$x[q25],0.2, "Q0.25", pos=2)
ggplot(experts)+
aes(x=Vanilla, fill="blue")+
geom_density()+
geom_vline(xintercept=mean_vanilla)
ggplot(experts)+
aes(x=Vanilla)+
geom_density(fill='red')+
geom_vline(xintercept=mean_vanilla)
ggplot(experts)+
aes(x=Vanilla)+
geom_density(fill='red', alpha=0.5)+
geom_vline(xintercept=mean_vanilla)
ggplot(experts)+
aes(x=Vanilla)+
geom_density(fill='red', alpha=0.5)+
geom_vline(xintercept=mean_vanilla)
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" ) %>%
# Add the mean's column
group_by(Product) %>%
mutate(mu=mean(Floral)) %>%
)
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" ) %>%
# Add the mean's column
group_by(Product) %>%
mutate(mu=mean(Floral))
library(dplyr)
df <- experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" ) %>%
# Add the mean's column
group_by(Product) %>%
mutate(mu=mean(Floral))
ggplot(df) +
aes(x=Floral, fill=Product) +
geom_density(alpha=0.4) +
geom_vline(aes(xintercept=mu, color=Product)) +
labs(title="Density of Spicy according three products")
ggplot(df) +
aes(x=Floral, fill=Product) +
geom_density(alpha=0.4) +
geom_vline(aes(xintercept=mu, color=Product)) +
labs(title="Density of Floral according three products")
ggplot(df) +
aes(x=Floral, color=Product) +
geom_density() +
geom_vline(aes(xintercept=mu, color=Product)) +
labs(title="Density of Floral according three products")
ggplot(df) +
aes(y=Floral, x= Product, fill=Product) +
geom_boxplot() +
labs(title="Boxplot of Floral according three products")
ggplot(df) +
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
labs(title="Boxplot of Floral according three products")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
library(gridExtra)
# Select three sensory attributes and three products
df <- experts %>%
select(c(Product, Floral, Citrus, Spicy, Heady)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" )
# First sensory attribute
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
# Delete the x-axis:
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Fourth sensory attribute
a4 <- ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3,a4, ncol=2, nrow = 2)
View(df)
ggplot(df) +
aes(x=Floral, color=Product) +
geom_density() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
labs(title="Density of Floral according three products")
ggplot(df)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
# Delete the x-axis:
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank())
ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
# First sensory attribute
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
# Delete the x-axis:
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
# Second sensory attribute
a2 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
# Third sensory attribute
a3 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
# Fourth sensory attribute
a4 <- ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
grid.arrange(a1, a2, a3,a4, ncol=2, nrow = 2)
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
a2 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
a3 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
a4 <- ggplot(df)+aes(y=Heady, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
grid.arrange(a1, a2, a3, a4, ncol=2, nrow = 2)
?stat_summary
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary(fun=mean, geom="line", position=aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary(fun=mean, geom="line", geom=aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary(fun=mean, geom="line", mapping=aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary( fun=mean, geom="line", color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary(mapping=aes(group=1), fun=mean, geom="line", color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary( fun=mean, geom="line", color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary(mapping=aes(group=1), fun=mean, geom="line", color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary( fun=mean, geom="line", color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+
aes(y=Floral, x= Product, color=Product) +
geom_boxplot() +
stat_summary(mapping=aes(group=1), fun=mean, geom="line", color="black") +
stat_summary(fun=mean, geom="point")
df
for (attribute in colnames(df)){
df[, attribute] <- df[, attribute]/sd(df[, attribute])
}
colnames(df)
for (attribute in colnames(df)[-1]){
df[, attribute] <- df[, attribute]/sd(df[, attribute])
}
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
a2 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
a3 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
a4 <- ggplot(df)+aes(y=Heady, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3, a4, ncol=2, nrow = 2)
df.means <- experts %>%
select(c(Product, Floral, Citrus, Spicy, Heady, Fruity, Green, Vanilla, Woody)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" | Product == "Coco Mademoiselle"| Product == "Aromatics Elixir"| Product == "Cinéma"| Product == "J'adore EP"| Product == "Shalimar")
means.V2 <- df.means %>% group_by(Product) %>% summarise(
mean_Spicy=mean(Spicy),
mean_Citrus=mean(Citrus),
mean_Floral=mean(Floral),
mean_Heady=mean(Heady),
mean_Fruity=mean(Fruity),
mean_Green=mean(Green),
mean_Vanilla=mean(Vanilla),
mean_Woody=mean(Woody)
)
df.means <- experts %>%
select(c(Product, Floral, Citrus, Spicy, Heady, Fruity, Green, Vanilla, Woody)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" | Product == "Coco Mademoiselle"| Product == "Aromatics Elixir"| Product == "Cinéma"| Product == "J'adore EP"| Product == "Shalimar")
for (attribute in colnames(df.means)[-1]){
df[, attribute] <- df[, attribute]/sd(df[, attribute])
}
colnames(df.means)[-1]
df.means
for (attribute in colnames(df.means)[-1]){
df[, attribute] <- df[, attribute]/sd(df[, attribute])
}
df.means <- experts %>%
select(c(Product, Floral, Citrus, Spicy, Heady, Fruity, Green, Vanilla, Woody)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" | Product == "Coco Mademoiselle"| Product == "Aromatics Elixir"| Product == "Cinéma"| Product == "J'adore EP"| Product == "Shalimar")
for (attribute in colnames(df.means)[-1]){
df.means[, attribute] <- df.means[, attribute]/sd(df[, attribute])
}
df.means <- experts %>%
select(c(Product, Floral, Citrus, Spicy, Heady, Fruity, Green, Vanilla, Woody)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" | Product == "Coco Mademoiselle"| Product == "Aromatics Elixir"| Product == "Cinéma"| Product == "J'adore EP"| Product == "Shalimar")
for (attribute in colnames(df.means)[-1]){
df.means[, attribute] <- df.means[, attribute]/sd(df.means[, attribute])
}
means.V2 <- df.means %>% group_by(Product) %>% summarise(
mean_Spicy=mean(Spicy),
mean_Citrus=mean(Citrus),
mean_Floral=mean(Floral),
mean_Heady=mean(Heady),
mean_Fruity=mean(Fruity),
mean_Green=mean(Green),
mean_Vanilla=mean(Vanilla),
mean_Woody=mean(Woody)
)
spicy.matrix <- as.matrix(dist(means.V2$mean_Spicy))
citrus.matrix <- as.matrix(dist(means.V2$mean_Citrus))
floral.matrix <- as.matrix(dist(means.V2$mean_Floral))
heady.matrix <- as.matrix(dist(means.V2$mean_Heady))
fruity.matrix <- as.matrix(dist(means.V2$mean_Fruity))
green.matrix <- as.matrix(dist(means.V2$mean_Green))
Vanilla.matrix <- as.matrix(dist(means.V2$mean_Vanilla))
woody.matrix <- as.matrix(dist(means.V2$mean_Woody))
a1 <- ggplot(means.V2)+
aes(x = mean_Spicy, y=mean_Citrus, color=Product)+
geom_path(aes(group=1),color="black")+
geom_point()
a2 <- ggplot(means.V2)+
aes(x = mean_Spicy, y=mean_Floral, color=Product)+
geom_path(aes(group=1),color="black")+
geom_point()
a3 <- ggplot(means.V2)+
aes(x = mean_Citrus, y=mean_Floral, color=Product)+
geom_path(aes(group=1),color="black")+
geom_point()
grid.arrange(a1, a2, a3, ncol=2, nrow = 2)
means.variables <- data.frame(means.V2, row.names = 1)
cov.att <- cov(means.variables)
dist.prod <- as.matrix(dist(means.variables))
# 1. Distribution of sensory attributes
barbes <- read_excel("data/barbes.xlsx")
library(readxl)
library(dplyr)
library(FactoMineR)
library(vietnameseConverter)
library(stringi)
barbes <- read_excel("data/barbes.xlsx")
trad <- read.table("data/traduction.txt", sep="\n", header = TRUE, encoding = "UTF-8")
colnames(trad) <- "Trad"
trad <- trad %>% mutate(trad = stri_trans_general(Trad, "Latin-ASCII")) %>% select(trad)
barbes <- barbes %>% mutate(Trad=trad$trad)
barbes <- data.frame(barbes$Barbes, barbes$Juge, barbes$Mots, barbes$Trad)
colnames(barbes) <- c("Barbes", "Juge", "Mots","Trad")
barbes$Barbes <- as.factor(barbes$Barbes)
barbes$Juge <- as.factor(barbes$Juge)
summary(barbes)
summary(barbes$Barbes)
# Un B7 au lieu de b7 traîne, correction :
levels(barbes$Barbes) <- c("b1","b2", "b3", "b4","b5","b6","b7","b7","b8")
summary(barbes$Barbes)
barbes.en <- barbes[,-4]
barbes.viet <- barbes[,-3]
res.textual.en <- textual(barbes.en,num.text = 3, contingence.by = 1, sep.word = ";")
eff.en <- as.data.frame(apply(res.textual.en$cont.table, MARGIN = 2, FUN=sum))
# Tout les mots : 627 mots
words_selection.en <- res.textual.en$cont.table[,apply(res.textual.en$cont.table, 2, sum)]
# Sélection des mots qui apparaissent plus de 10 fois : 31
words_selection_sup10.en <- res.textual.en$cont.table[,apply(res.textual.en$cont.table, 2, sum)>=10]
res.textual.viet <- textual(barbes.viet,num.text = 3, contingence.by = 1, sep.word = ";")
eff.viet <- as.data.frame(apply(res.textual.viet$cont.table, MARGIN = 2, FUN=sum))
# Tout les mots : 669 mots
words_selection.viet <- res.textual.viet$cont.table[,apply(res.textual.viet$cont.table, 2, sum)]
# Sélection des mots qui apparaissent plus de 10 fois : 29
words_selection_sup10.viet <- res.textual.viet$cont.table[,apply(res.textual.viet$cont.table, 2, sum)>=10]
res.CA.en <- CA(words_selection.en, graph=FALSE)
#plot.CA(res.CA.en) -> illisible
res.CA.sup10.en <- CA(words_selection_sup10.en, graph=FALSE)
plot.CA(res.CA.sup10.en)
res.CA.viet <- CA(words_selection.viet, graph=FALSE)
# plot.CA(res.CA.viet) -> illisible
res.CA.sup10.viet <- CA(words_selection_sup10.viet, graph=FALSE)
plot.CA(res.CA.sup10.viet)
# ANGLAIS :
barbes.en.V2 <- data.frame(barbes=levels(barbes.en$Barbes))
for (j in levels(barbes.en$Juge)){
test <- barbes.en %>% filter(Juge==j)
test <- test[-2]
barbes.en.V2 <- cbind(barbes.en.V2, j=test[,2])
}
colnames(barbes.en.V2)[-1] <- levels(barbes.en$Juge)
# VIETNAMIEN :
barbes.viet.V2 <- data.frame(barbes=levels(barbes.viet$Barbes))
for (j in levels(barbes.viet$Juge)){
test <- barbes.viet %>% filter(Juge==j)
test <- test[-2]
barbes.viet.V2 <- cbind(barbes.viet.V2, j=test[,2])
}
colnames(barbes.viet.V2)[-1] <- levels(barbes.viet$Juge)
View(barbes.viet.V2)
words_selection.viet
View(words_selection_sup10.en)
