<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
heady.matrix <- as.matrix(dist(means.V2$mean_Heady))
fruity.matrix <- as.matrix(dist(means.V2$mean_Fruity))
green.matrix <- as.matrix(dist(means.V2$mean_Green))
Vanilla.matrix <- as.matrix(dist(means.V2$mean_Vanilla))
woody.matrix <- as.matrix(dist(means.V2$mean_Woody))
a1 <- ggplot(means.V2)+
aes(x = mean_Spicy, y=mean_Citrus, color=Product)+
geom_path(aes(group=1),color="black")+
geom_point()
a2 <- ggplot(means.V2)+
aes(x = mean_Spicy, y=mean_Floral, color=Product)+
geom_path(aes(group=1),color="black")+
geom_point()
a3 <- ggplot(means.V2)+
aes(x = mean_Citrus, y=mean_Floral, color=Product)+
geom_path(aes(group=1),color="black")+
geom_point()
grid.arrange(a1, a2, a3, ncol=2, nrow = 2)
means.variables <- data.frame(means.V2, row.names = 1)
cov.att <- cov(means.variables)
dist.prod <- as.matrix(dist(means.variables))
heatmap(cov.att)
heatmap(dist.prod)
Products_sc_Mat <- as.matrix(dist(scale(dist.prod))^2)
sum(Products_sc_Mat)/(2*dim(Products_sc_Mat)[1]*(dim(Products_sc_Mat)[1]-1))
Att_sc_Mat <- as.matrix(dist(scale(cov.att))^2)
sum(Att_sc_Mat)/(2*dim(Att_sc_Mat)[1]*(dim(Att_sc_Mat)[1]-1))
=======
<<<<<<< HEAD
>>>>>>> bb85babbc05571f0b46da432f65264a0683ee712
G1 <- as.data.frame(cov.att) %>% select(mean_Citrus, mean_Floral, mean_Fruity, mean_Green)
G2 <- as.data.frame(cov.att) %>% select(mean_Spicy, mean_Heady, mean_Woody, mean_Vanilla)
Att_G1_sc_Mat <- as.matrix(dist(scale(G1))^2)
inertia.G1 <- sum(Att_G1_sc_Mat)/(2*dim(Att_G1_sc_Mat)[1]*(dim(Att_G1_sc_Mat)[1]-1))
Att_G2_sc_Mat <- as.matrix(dist(scale(G2))^2)
inertia.G2 <- sum(Att_G2_sc_Mat)/(2*dim(Att_G2_sc_Mat)[1]*(dim(Att_G2_sc_Mat)[1]-1))
inertia.G1+inertia.G2
G1 <- as.data.frame(dist.prod) %>% select("Aromatics Elixir", Shalimar, "Chanel N5", Angel)
G2 <- as.data.frame(dist.prod) %>% select(Cin√©ma, "Coco Mademoiselle", "J'adore EP", "J'adore ET")
Att_G1_sc_Mat <- as.matrix(dist(scale(G1))^2)
inertia.G1 <- sum(Att_G1_sc_Mat)/(2*dim(Att_G1_sc_Mat)[1]*(dim(Att_G1_sc_Mat)[1]-1))
Att_G2_sc_Mat <- as.matrix(dist(scale(G2))^2)
inertia.G2 <- sum(Att_G2_sc_Mat)/(2*dim(Att_G2_sc_Mat)[1]*(dim(Att_G2_sc_Mat)[1]-1))
inertia.G1+inertia.G2
<<<<<<< HEAD
library(FactoMineR)
res<-PCA(scale(means.variables), graph = FALSE, scale.unit = F)
res$ind$coord
res$var$coord
svd <- svd(scale(means.variables))
diag <- diag(svd$d)
#Verification
svd$u%*%diag%*%t(svd$v)
scale(as.matrix(means.variables))
#Individuals coordinates
scale(means.variables)%*%svd$v
#Variables coordinates
t(scale(means.variables))%*%svd$u/sqrt(dim(means.variables)[1])
#Comparate with PCA()
res$ind$coord
res$var$coord
NIPALS <- function(X){
X = as.matrix(X)
N = nrow(X)
M = ncol(X)
D = diag(1/N, N)
Xini = X
qrX=qr(X)
rang = qrX$rank
vec=matrix(0,nrow=M,ncol=rang)
t=X[,1]
i=1
p=t(X)%*%t%*%(1/(t(t)%*%t))
p=p/as.numeric(sqrt(t(p)%*%p))
print(rang)
while (i<rang+1) {
norm=1
while(norm>0.000001){
t=(X%*%p)%*%(1/(t(p)%*%p))
p2=t(X)%*%t%*%(1/(t(t)%*%t))
p2=p2/as.numeric(sqrt(t(p2)%*%p2))
diff=p2-p
=======
=======
>>>>>>> bb85babbc05571f0b46da432f65264a0683ee712
norm=t(diff)%*%diff
p=p2
print(p)
print(i)
}
vec[,i]=p
X=X-(t%*%t(p))
i=i+1
}
return(vec)
}
NIPALS(means.variables)
svd(means.variables)$v
library("FactoMineR")
library("factoextra")
data(wine)
# We keep actives variables
wine_quanti <- wine[, -c(1,2,30,31)]
group1 <- wine_quanti[, 1:5]
group2 <- wine_quanti[, 6:8]
group3 <- wine_quanti[, 9:18]
group4 <- wine_quanti[, 19:27]
# PCA on each group
res.pca1 <- PCA(group1)
res.pca2 <- PCA(group2)
res.pca3 <- PCA(group3)
res.pca4 <- PCA(group4)
# First eigen values of each PCA
egv1 <- res.pca1$eig[1]
egv2 <- res.pca2$eig[1]
egv3 <- res.pca3$eig[1]
egv4 <- res.pca4$eig[1]
# Vector of weight
w <- c(1/c(rep(egv1,5),rep(egv2,3),rep(egv3,10),rep(egv4,9) ))
res.pca.pon <- PCA(wine_quanti, col.w = w)
coord_pca_pond <- res.pca.pon$ind$coord
res.pca.pon$eig
svd.triplet(scale(wine_quanti))
PCA(wine_quanti)$svd
vanilla <- experts$Vanilla
plot(x=vanilla, y=rep(1, length(vanilla)), main="Vanilla", ylab="")
abline(v = mean(vanilla), col="red", lwd=3, lty=2)
df <- data.frame(experts$Vanilla, experts$Citrus)
colnames(df) <- c("Vanilla", "Citrus")
plot(df)
points(x=mean(df$Vanilla),y=mean(df$Citrus), type="p", col="red",lwd=3, lty=2)
text(mean(df$Vanilla)+0.5, mean(df$Citrus)+0.5, "Center of gravity", col="red")
df <- data.frame(experts[,5:16])
colMeans(df)
matG <- matrix(colMeans(df[1:10,]), nrow(df[1:10,]), ncol(df) , byrow=TRUE)
apply((df[1:10,] - matG)^2, 1, sum)
distG <- apply((df[1:10,] - matG)^2, 1, sum)
sum(distG)/(nrow(df[1:10,])-1)
variances <- c()
for (j in 1:12){
variances <- cbind(variances, var(df[1:10,j]))
}
variances
sum(variances)
df <- data.frame(experts$Fruity, experts$Floral)
colnames(df) <- c("Fruity", "Floral")
plot(df)
N <- length(df$Floral)
1/(N-1)*sum((df$Fruity-mean(df$Fruity))*(df$Floral-mean(df$Floral)))
cov(df$Fruity,df$Floral)
cov <- 1/(N-1)*sum((df$Fruity-mean(df$Fruity))*(df$Floral-mean(df$Floral)))
cov / (sqrt(var(df$Fruity))*sqrt(var(df$Floral)))
cor(df$Fruity, df$Floral)
f <- (16*0.26/15)/(21*0.37/20)
v1 <- qf(0.025,df1=15,df2=20)
v2 <- qf(0.975,df1=15,df2=20)
var.test(experts$Spicy, experts$Heady)
(288*var(experts$Spicy)/287)/(288*var(experts$Heady)/287)
x<-c(442.7, 380.2, 406.8, 507.7, 615.1, 486.8, 438.7, 390.7, 399.5, 789.9)
res<-t.test(x, mu=200) #real test
## find manually :
xbar <- (1/10)*sum(x) # estimate mean of x
diff <- x-xbar
sumsq <- (1/9)*sum(diff^2) # non-biaised estimate var of x
t <- sqrt(10)*(xbar-200)/sqrt(sumsq)
(mean(experts$Spicy) - mean(experts$Heady))/sqrt((var(experts$Spicy)/288)+(var(experts$Heady)/288))
t.test(experts$Spicy, experts$Heady)
df <- data.frame(experts$Product, experts$Woody)
colnames(df) <- c("Product", "Woody")
one.way <- aov(Woody~Product, data=df)
summary(one.way)
x1 <- 6.4*10.6
x2 <- x1*4
x3 <- 377.36 - x2
x4 <- x3/10.6
x5 <- 4+x4
df <- cbind(df, experts$Session)
colnames(df) <- c("Product","Woody","Session")
two.way <- aov(Woody~Product+Session, data=df)
summary(two.way)
interaction <- aov(Woody~Product*Session, data=df)
summary(interaction)
library(SensoMineR)
graphinter(df,col.p=1,col.j=3,firstvar=2,lastvar=2,numr=1,numc=1)
res.decat <- decat(experts,formul="~Product+Panelist+Session",firstvar=5, lastvar=ncol(experts),graph=FALSE)
names(res.decat)
res.decat$resF
heady.aov <- aov(Heady~Product+Panelist+Session+Product:Panelist+Product:Session+Panelist:Session, data=experts)
summary(heady.aov)
library(dplyr)
library(questionr)
data_fruity <- experts %>% filter(Fruity>6)
data_table <- table(data_fruity$Product)
tab <- table(data_fruity$Product, data_fruity$Panelist)
cprop(tab)
data(tea)
summary(tea)
tab <- table(tea$breakfast,tea$tea.time)
tab
theo11 <- (sum(tab[1,])*sum(tab[,1]))/sum(tab)
theo12 <- (sum(tab[1,])*sum(tab[,2]))/sum(tab)
theo21 <- (sum(tab[2,])*sum(tab[,1]))/sum(tab)
theo22 <- (sum(tab[2,])*sum(tab[,2]))/sum(tab)
theo <- cbind(c(theo11,theo21),c(theo12,theo22))
colnames(theo)<-colnames(tab)
row.names(theo)<- row.names(tab)
theo
tab
newtab <- tab-theo
newtab <- newtab^2
newtab <- newtab/theo
newtab
chi2 <- sum(newtab)
chi2
res.condes <- condes(donnee = data.frame(experts$Fruity, experts$Floral), num.var = 1)
res.condes$quanti
res.condes <- condes(donnee = data.frame(experts$Fruity, experts$Product), num.var = 1)
res.condes$quali
res.condes <- condes(donnee = experts, num.var = 5)
res.condes$quanti
res.condes$quali
res.condes$category
res.catdes <- catdes(donnee = data.frame(experts$Product, experts$Green), num.var = 1)
res.catdes$quanti.var
res.catdes$quanti
catdes(donnee = data.frame(experts$Product, experts$Green), num.var = 1, proba=1)
res.catdes <- catdes(donnee = data.frame(experts$Product, experts$Session), num.var = 1)
res.catdes <- catdes(donnee = data.frame(experts$Product, experts$Session), num.var = 1, proba = 1)
res.catdes$test.chi2
res.catdes$category
res.catdes <- catdes(donnee = experts, num.var = 4)
res.catdes$test.chi2
res.catdes$quanti.var
res.catdes$quanti
<<<<<<< HEAD
=======
>>>>>>> ae9b73f6381064e14da8c909c2b9e6642cd12b00
library(FactoMineR)
res<-PCA(scale(means.variables), graph = FALSE, scale.unit = F)
res$ind$coord
res$var$coord
svd <- svd(scale(means.variables))
diag <- diag(svd$d)
#Verification
svd$u%*%diag%*%t(svd$v)
scale(as.matrix(means.variables))
#Individuals coordinates
scale(means.variables)%*%svd$v
#Variables coordinates
t(scale(means.variables))%*%svd$u/sqrt(dim(means.variables)[1])
#Comparate with PCA()
res$ind$coord
res$var$coord
NIPALS <- function(X){
X = as.matrix(X)
N = nrow(X)
M = ncol(X)
D = diag(1/N, N)
Xini = X
qrX=qr(X)
rang = qrX$rank
vec=matrix(0,nrow=M,ncol=rang)
t=X[,1]
i=1
p=t(X)%*%t%*%(1/(t(t)%*%t))
p=p/as.numeric(sqrt(t(p)%*%p))
print(rang)
while (i<rang+1) {
norm=1
while(norm>0.000001){
t=(X%*%p)%*%(1/(t(p)%*%p))
p2=t(X)%*%t%*%(1/(t(t)%*%t))
p2=p2/as.numeric(sqrt(t(p2)%*%p2))
diff=p2-p
norm=t(diff)%*%diff
p=p2
print(p)
print(i)
}
vec[,i]=p
X=X-(t%*%t(p))
i=i+1
}
return(vec)
}
NIPALS(means.variables)
svd(means.variables)$v
library("FactoMineR")
library("factoextra")
data(wine)
# We keep actives variables
wine_quanti <- wine[, -c(1,2,30,31)]
group1 <- wine_quanti[, 1:5]
group2 <- wine_quanti[, 6:8]
group3 <- wine_quanti[, 9:18]
group4 <- wine_quanti[, 19:27]
# PCA on each group
res.pca1 <- PCA(group1)
res.pca2 <- PCA(group2)
res.pca3 <- PCA(group3)
res.pca4 <- PCA(group4)
# First eigen values of each PCA
egv1 <- res.pca1$eig[1]
egv2 <- res.pca2$eig[1]
egv3 <- res.pca3$eig[1]
egv4 <- res.pca4$eig[1]
# Vector of weight
w <- c(1/c(rep(egv1,5),rep(egv2,3),rep(egv3,10),rep(egv4,9) ))
res.pca.pon <- PCA(wine_quanti, col.w = w)
coord_pca_pond <- res.pca.pon$ind$coord
res.pca.pon$eig
svd.triplet(scale(wine_quanti))
PCA(wine_quanti)$svd
vanilla <- experts$Vanilla
plot(x=vanilla, y=rep(1, length(vanilla)), main="Vanilla", ylab="")
abline(v = mean(vanilla), col="red", lwd=3, lty=2)
df <- data.frame(experts$Vanilla, experts$Citrus)
colnames(df) <- c("Vanilla", "Citrus")
plot(df)
points(x=mean(df$Vanilla),y=mean(df$Citrus), type="p", col="red",lwd=3, lty=2)
text(mean(df$Vanilla)+0.5, mean(df$Citrus)+0.5, "Center of gravity", col="red")
df <- data.frame(experts[,5:16])
colMeans(df)
matG <- matrix(colMeans(df[1:10,]), nrow(df[1:10,]), ncol(df) , byrow=TRUE)
apply((df[1:10,] - matG)^2, 1, sum)
distG <- apply((df[1:10,] - matG)^2, 1, sum)
sum(distG)/(nrow(df[1:10,])-1)
variances <- c()
for (j in 1:12){
variances <- cbind(variances, var(df[1:10,j]))
}
variances
sum(variances)
df <- data.frame(experts$Fruity, experts$Floral)
colnames(df) <- c("Fruity", "Floral")
plot(df)
N <- length(df$Floral)
1/(N-1)*sum((df$Fruity-mean(df$Fruity))*(df$Floral-mean(df$Floral)))
cov(df$Fruity,df$Floral)
cov <- 1/(N-1)*sum((df$Fruity-mean(df$Fruity))*(df$Floral-mean(df$Floral)))
cov / (sqrt(var(df$Fruity))*sqrt(var(df$Floral)))
cor(df$Fruity, df$Floral)
f <- (16*0.26/15)/(21*0.37/20)
v1 <- qf(0.025,df1=15,df2=20)
v2 <- qf(0.975,df1=15,df2=20)
var.test(experts$Spicy, experts$Heady)
(288*var(experts$Spicy)/287)/(288*var(experts$Heady)/287)
x<-c(442.7, 380.2, 406.8, 507.7, 615.1, 486.8, 438.7, 390.7, 399.5, 789.9)
res<-t.test(x, mu=200) #real test
## find manually :
xbar <- (1/10)*sum(x) # estimate mean of x
diff <- x-xbar
sumsq <- (1/9)*sum(diff^2) # non-biaised estimate var of x
t <- sqrt(10)*(xbar-200)/sqrt(sumsq)
(mean(experts$Spicy) - mean(experts$Heady))/sqrt((var(experts$Spicy)/288)+(var(experts$Heady)/288))
t.test(experts$Spicy, experts$Heady)
df <- data.frame(experts$Product, experts$Woody)
colnames(df) <- c("Product", "Woody")
one.way <- aov(Woody~Product, data=df)
summary(one.way)
x1 <- 6.4*10.6
x2 <- x1*4
x3 <- 377.36 - x2
x4 <- x3/10.6
x5 <- 4+x4
df <- cbind(df, experts$Session)
colnames(df) <- c("Product","Woody","Session")
two.way <- aov(Woody~Product+Session, data=df)
summary(two.way)
interaction <- aov(Woody~Product*Session, data=df)
summary(interaction)
library(SensoMineR)
graphinter(df,col.p=1,col.j=3,firstvar=2,lastvar=2,numr=1,numc=1)
res.decat <- decat(experts,formul="~Product+Panelist+Session",firstvar=5, lastvar=ncol(experts),graph=FALSE)
names(res.decat)
res.decat$resF
heady.aov <- aov(Heady~Product+Panelist+Session+Product:Panelist+Product:Session+Panelist:Session, data=experts)
summary(heady.aov)
library(dplyr)
<<<<<<< HEAD
library(questionr)
data_fruity <- experts %>% filter(Fruity>6)
data_table <- table(data_fruity$Product)
tab <- table(data_fruity$Product, data_fruity$Panelist)
cprop(tab)
data(tea)
summary(tea)
tab <- table(tea$breakfast,tea$tea.time)
tab
theo11 <- (sum(tab[1,])*sum(tab[,1]))/sum(tab)
theo12 <- (sum(tab[1,])*sum(tab[,2]))/sum(tab)
theo21 <- (sum(tab[2,])*sum(tab[,1]))/sum(tab)
theo22 <- (sum(tab[2,])*sum(tab[,2]))/sum(tab)
theo <- cbind(c(theo11,theo21),c(theo12,theo22))
colnames(theo)<-colnames(tab)
row.names(theo)<- row.names(tab)
theo
tab
newtab <- tab-theo
newtab <- newtab^2
newtab <- newtab/theo
newtab
chi2 <- sum(newtab)
chi2
res.condes <- condes(donnee = data.frame(experts$Fruity, experts$Floral), num.var = 1)
res.condes$quanti
res.condes <- condes(donnee = data.frame(experts$Fruity, experts$Product), num.var = 1)
res.condes$quali
res.condes <- condes(donnee = experts, num.var = 5)
res.condes$quanti
res.condes$quali
res.condes$category
res.catdes <- catdes(donnee = data.frame(experts$Product, experts$Green), num.var = 1)
res.catdes$quanti.var
res.catdes$quanti
catdes(donnee = data.frame(experts$Product, experts$Green), num.var = 1, proba=1)
res.catdes <- catdes(donnee = data.frame(experts$Product, experts$Session), num.var = 1)
res.catdes <- catdes(donnee = data.frame(experts$Product, experts$Session), num.var = 1, proba = 1)
res.catdes$test.chi2
res.catdes$category
res.catdes <- catdes(donnee = experts, num.var = 4)
res.catdes$test.chi2
res.catdes$quanti.var
res.catdes$quanti
ggplot(experts)+
aes(x=Spicy, y=..density..)+
geom_histogram( fill=Product)
ggplot(experts)+
aes(x=Spicy, y=..density..)+
geom_histogram()
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density.., fill=Product))
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density..), fill=Product)
ggplot(experts)+
aes(x=Spicy, fill=Product)+
geom_histogram(aes(y=..density..))
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density..))
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density..), col=Product)
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density..), fill=experts$Product)
View(experts)
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density..))
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density..), fill="white")
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density..), fill=Product)
ggplot(experts)+
aes(x=Spicy, fill=Product)+
geom_histogram(aes(y=..density..))
ggplot(experts)+
aes(x=Spicy, y=..density..)+
geom_histogram()
ggplot(experts)+
aes(x=Spicy, y=..density.., group_by(Product))+
geom_histogram()
ggplot(experts)+
aes(x=Spicy,fill=Product)+
geom_histogram(aes(y=..density..), position="identity")
ggplot(experts)+
aes(x=Spicy,fill=Product)+
geom_histogram(aes(y=..density..), position="identity")
ggplot(experts)+
aes(x=Spicy,fill=Product)+
geom_histogram(aes(y=..density..), position="identity")
ggplot(experts)+
aes(x=Spicy)+
geom_histogram(aes(y=..density..))
ggplot(experts)+
aes(x=Spicy,fill=Product)+
geom_histogram(aes(y=..density..), position="identity")+
labs(title="Histogram of Spicy" ,x="Spicy values", y = "Density")
ggplot(experts) +
aes(x=Vanilla) +
geom_density(color=Product) +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
ggplot(experts) +
aes(x=Vanilla, color=Product) +
geom_density(y=..density..) +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
ggplot(experts) +
aes(x=Vanilla, fill=Product) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
perfumes <- read.csv("data/perfumes_qda_experts.csv")
perfumes <- perfumes %>% filter(Product=="Angel"|Product=="Chanel N5"|Product=="J'adore ET") %>%
select(c("Product","Vanilla", "Floral", "Citrus"))
library(dplyr)
library(ggplot2)
perfumes <- read.csv("data/perfumes_qda_experts.csv")
perfumes <- perfumes %>% filter(Product=="Angel"|Product=="Chanel N5"|Product=="J'adore ET") %>%
select(c("Product","Vanilla", "Floral", "Citrus"))
hist(perfumes$Vanilla)
hist(perfumes$Vanilla, breaks = 50)
hist(perfumes$Vanilla, breaks = 50, probability = TRUE)
plot(density(perfumes$Vanilla))
hist(perfumes$Vanilla, breaks = 50, probability = TRUE)
lines(density(perfumes$Vanilla), col="red")
plot(density(perfumes$Vanilla), col="blue", main="Vanilla and Floral density")
lines(density(perfumes$Floral), col="red")
legend(10, 0.2, legend=c("Vanilla", "Floral"),
col=c("blue", "red"), lty=1:2, cex=0.8)
d<-density(perfumes$Vanilla)
# Plot the line
plot(d, main="Vanilla Distribution and median")
p50=which.max(cumsum(d$y/sum(d$y)) >= 0.50)
# Plot the shading
polygon(c(-5, d$x[1:p50], d$x[p50]), c(0, d$y[1:p50], 0), col = 'lightblue')
d<-density(perfumes$Vanilla)
# Plot the line
plot(d, main="Vanilla Distribution and quartile")
p25=which.max(cumsum(d$y/sum(d$y)) >= 0.25)
p75=which.max(cumsum(d$y/sum(d$y)) >= 0.75)
# Plot the shading
polygon(c(-5, d$x[1:p25], d$x[p25]), c(0, d$y[1:p25], 0), col = 'lightblue')
poly_range <- d$x > d$x[p75]
polygon(c(d$x[p75], d$x[poly_range], 15),c(0, d$y[poly_range], 0),col = "lightblue")
d<-density(perfumes$Vanilla)
# Plot the line
plot(d, main="Vanilla Distribution and quantiles")
p025=which.max(cumsum(d$y/sum(d$y)) >= 0.025)
p975=which.max(cumsum(d$y/sum(d$y)) >= 0.975)
# Plot the shading
polygon(c(-5, d$x[1:p025], d$x[p025]), c(0, d$y[1:p025], 0), col = 'lightblue')
poly_range <- d$x > d$x[p975]
polygon(c(d$x[p975], d$x[poly_range], 15),c(0, d$y[poly_range], 0),col = "lightblue")
# Plot the vline
abline(v=mean(perfumes$Vanilla))
text(mean(perfumes$Vanilla),0.2, "mean", pos=2)
abline(v=d$x[p975])
text(d$x[p975],0.2, "Q97.5", pos=2)
abline(v=d$x[p025])
text(d$x[p025],0.2, "Q0.25", pos=2)
=======
GMO.Al.A <- GMO %>% select(c( Political.Party,Position.Al.A,))
>>>>>>> bb85babbc05571f0b46da432f65264a0683ee712
library(ggplot2)
ggplot(GMO.Al.A, aes(Position.Al.A, ..count..)) + geom_bar(aes(fill = Political.Party), color="black", position = "dodge") + ggtitle("Barplot of cross-categories") +
scale_fill_manual(values=c("Extrem Left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc",))
library(FactoMineR)
library(SensoMineR)
#import
GMO <- read.csv("data/gmo.csv", sep=';')
GMO<-GMO[-136,]
#transform into factor
for (i in 1:21)
{
GMO[, i] <- as.factor(GMO[, i])
}
#summary
summary(GMO)
#selection variable Political.Party and Position.Al.A
GMO.Al.A <- GMO[,c( "Political.Party","Position.Al.A")]
#or tidyverse version :
library(dplyr)
GMO.Al.A <- GMO %>% select(c( Political.Party,Position.Al.A,))
library(ggplot2)
<<<<<<< HEAD
ggplot(GMO.Al.A, aes(Position.Al.A, ..count..)) + geom_bar(aes(fill = Political.Party), color="black", position = "dodge") + ggtitle("Barplot of cross-categories") +
scale_fill_manual(values=c("Extrem Left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc",))
=======
ggplot(GMO.Al.A, aes(Position.Al.A, ..count..)) + geom_bar(aes(fill = Political.Party), color="black", position = "dodge") + ggtitle("Barplot of cross-categories")
## ..count.. : stat transformation of the original data set
set.seed(7)
ind.sample <- sample(1:135)
GMO.Al.A.Sample <- data.frame("Position.Al.A"=GMO.Al.A$Position.Al.A[ind.sample],'Political.Party'=GMO.Al.A$Political.Party)
#visualization
ggplot(GMO.Al.A.Sample, aes(Position.Al.A, ..count..)) + geom_bar(aes(fill = Political.Party), color="black", position = "dodge") + ggtitle("Barplot of cross-categories sampled")
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
>>>>>>> ae9b73f6381064e14da8c909c2b9e6642cd12b00
par(mfrow=c(1,3))
boxplot(perfumes$Floral, main="Floral")
text(0.75,mean(perfumes$Floral)+0.25, "mean", pos=2)
abline(h=mean(perfumes$Floral))
text(0.75,min(perfumes$Vanilla)+0.25, "min", pos=2)
abline(h=min(perfumes$Vanilla))
text(0.75,quantile(perfumes$Floral, probs = 0.25)+0.25, "q1", pos=2)
abline(h=quantile(perfumes$Floral, probs = 0.25))
text(0.75,quantile(perfumes$Floral, probs = 0.75)+0.25, "q3", pos=2)
abline(h=quantile(perfumes$Floral, probs = 0.75))
text(0.75,quantile(perfumes$Floral, probs = 0.5)+0.25, "Median", pos=2)
abline(h=quantile(perfumes$Floral, probs = 0.5))
text(0.75,quantile(perfumes$Floral, probs = 1)+0.25, "max", pos=2)
abline(h=quantile(perfumes$Floral, probs = 1))
boxplot(perfumes$Vanilla, main="Vanilla")
text(0.75,mean(perfumes$Vanilla)+0.25, "mean", pos=2)
abline(h=mean(perfumes$Vanilla))
boxplot(perfumes$Citrus, main="Citrus")
abline(h=mean(perfumes$Citrus))
text(0.75,mean(perfumes$Citrus)+0.25, "mean", pos=2)
library(tidyverse)
perfumes <- perfumes %>% filter(Product=="Angel"|Product=="Chanel N5"|Product=="J'adore ET")
ggplot(perfumes)+aes(x=Floral, color=Product)+geom_density()
ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot()
ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
library("gridExtra")
A1 <- ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A2 <- ggplot(perfumes)+aes(y=Vanilla, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A3 <- ggplot(perfumes)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(A1, A2, A3, ncol=2, nrow = 2)
library("gridExtra")
A1 <- ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A2 <- ggplot(perfumes)+aes(y=Vanilla, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A3 <- ggplot(perfumes)+aes(y=Citrus, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(A1, A2, A3, ncol=2, nrow = 2)
Mean_Attributes <- perfumes %>% group_by(Product) %>% summarise(
mean_Vanilla=mean(Vanilla),
mean_Citrus=mean(Citrus),
mean_Floral=mean(Floral))
A1A2<-ggplot(Mean_Attributes)+aes(x = mean_Vanilla, y=mean_Floral, color=Product)+geom_path(aes(group=1),color="black")+geom_point()
A2A3<-ggplot(Mean_Attributes)+aes(x = mean_Floral, y=mean_Citrus, color=Product)+geom_path(aes(group=1),color="black")+geom_point()
A1A3<-ggplot(Mean_Attributes)+aes(x = mean_Vanilla, y=mean_Citrus, color=Product)+geom_path(aes(group=1), color="black")+geom_point()
grid.arrange(A1A2, A2A3, A1A3, ncol=2, nrow = 2)
cov(Mean_Attributes[,-1])
cov(perfumes[,c("Vanilla","Citrus", "Floral")])
Mean_Attributes <- data.frame(Mean_Attributes, row.names=1)
Attributes_Mat <- cov(Mean_Attributes)
Products_Mat <- as.matrix(dist(Mean_Attributes)^2)
Attributes_Mat
Products_Mat
Products_sc_Mat <- as.matrix(dist(scale(Mean_Attributes))^2)
Products_sc_Mat
image(Attributes_Mat)
image(Products_sc_Mat)
Att_sc_Mat <- cov(scale(Mean_Attributes))
Att_sc_Mat
sum(Products_sc_Mat)/12
block1 <- Products_sc_Mat[2:3,2:3]
library(FactoMineR)
res<-PCA(scale(Mean_Attributes), graph = FALSE, scale.unit = F)
res$ind$coord
res$var$coord
svd <- svd(scale(Mean_Attributes))
diag <- diag(svd$d)
#verification
svd$u%*%diag%*%t(svd$v)
scale(as.matrix(Mean_Attributes))[1:3,1:3]
scale(Mean_Attributes)%*%svd$v
t(scale(Mean_Attributes))%*%svd$u/sqrt(3)
NIPALS <- function(X){
X = as.matrix(X)
N = nrow(X)
M = ncol(X)
D = diag(1/N, N)
Xini = X
qrX=qr(X)
rang = qrX$rank
vec=matrix(0,nrow=M,ncol=rang)
t=X[,1]
i=1
p=t(X)%*%t%*%(1/(t(t)%*%t))
p=p/as.numeric(sqrt(t(p)%*%p))
while (i<rang+1) {
norm=1
while(norm>0.000001){
t=(X%*%p)%*%(1/(t(p)%*%p))
p2=t(X)%*%t%*%(1/(t(t)%*%t))
p2=p2/as.numeric(sqrt(t(p2)%*%p2))
diff=p2-p
norm=t(diff)%*%diff
p=p2
}
vec[,i]=p
X=X-(t%*%t(p))
i=i+1
}
<<<<<<< HEAD
return(vec)
}
NIPALS(Mean_Attributes)
svd(Mean_Attributes)
ggplot(experts) +
aes(x=Vanilla,color=Product) +
geom_density() +
)
ggplot(experts) +
aes(x=Vanilla,color=Product) +
geom_density()
ggplot(experts) +
aes(x=Floral,color=Product) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
ggplot(experts) +
aes(x=Vanilla,color=Product) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
ggplot(experts) +
aes(x=Vanilla,fill=Product) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
experts %>% filter(Product == "Pleasures") %>% ggplot(experts) +
aes(x=Vanilla,fill=Product) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
experts %>% filter(Product == "Pleasures") %>% ggplot() +
aes(x=Vanilla) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
experts %>% filter(Product == "Pleasures") %>% ggplot() +
aes(x=Vanilla) +
geom_density(boundary = 0) +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
experts %>% filter(Product == "Pleasures") %>% ggplot() +
aes(x=Vanilla, y=..scaled..) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
ggplot(experts) +
aes(x=Vanilla, y=..scaled.., color=Product) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
ggplot(experts) +
aes(x=Vanilla, y=..scaled..,fill=Product) +
geom_density(alpha=0.5)  +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
ggplot(experts) +
aes(x=Vanilla, color=Product) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
experts %>% filter(Product=="Pleasures") %>%  ggplot() +
aes(x=Vanilla) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
0.25*1.3
ggplot(experts) +
aes(x=Vanilla) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
ggplot(experts) +
aes(x=Vanilla, col=Product) +
geom_density() +
labs(title="Density of Vanilla for each product" ,x="Vanilla values", y = "Density")
=======
rownames(GMO_chi2_row) <- rownames(GMO_table)
colnames(GMO_chi2_row) <- rownames(GMO_table)
dim <- ncol(GMO_chi2_row)
image(1:dim, 1:dim,GMO_chi2_row, axes=F, xlab="", ylab="")
axis(1, 1:dim, row.names(GMO_chi2_row), cex.axis=1, las=3)
axis(2, 1:dim, row.names(GMO_chi2_row), cex.axis=1, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", GMO_chi2_row), cex=1)
res.chi2.gmo <- chisq.test(GMO_table)
res.chi2.sample <- chisq.test(table(GMO.Al.A.Sample))
res.chi2.gmo$residuals
res.CA <- CA(GMO_table)
plot(res.CA, invisible = "col")
plot(res.CA, invisible = "row")
res.descfreq <- descfreq(GMO_table, proba = 1)
res.descfreq
library(readxl)
library(dplyr)
library(FactoMineR)
library(vietnameseConverter)
library(stringi)
barbes <- read_excel("data/barbes.xlsx")
trad <- read.table("data/traduction.txt", sep="\n", header = TRUE, encoding = "UTF-8")
colnames(trad) <- "Trad"
trad <- trad %>% mutate(trad = stri_trans_general(Trad, "Latin-ASCII")) %>% select(trad)
barbes <- barbes %>% mutate(Trad=trad$trad)
barbes <- data.frame(barbes$Barbes, barbes$Juge, barbes$Mots, barbes$Trad)
colnames(barbes) <- c("Barbes", "Juge", "Mots","Trad")
barbes$Barbes <- as.factor(barbes$Barbes)
barbes$Juge <- as.factor(barbes$Juge)
summary(barbes)
summary(barbes$Barbes)
# Un B7 au lieu de b7 tra√Æne, correction :
levels(barbes$Barbes) <- c("b1","b2", "b3", "b4","b5","b6","b7","b7","b8")
summary(barbes$Barbes)
barbes.en <- barbes[,-4]
barbes.viet <- barbes[,-3]
res.textual.en <- textual(barbes.en,num.text = 3, contingence.by = 1, sep.word = ";")
eff.en <- as.data.frame(apply(res.textual.en$cont.table, MARGIN = 2, FUN=sum))
# Tout les mots : 627 mots
words_selection.en <- res.textual.en$cont.table[,apply(res.textual.en$cont.table, 2, sum)]
# S√©lection des mots qui apparaissent plus de 10 fois : 31
words_selection_sup10.en <- res.textual.en$cont.table[,apply(res.textual.en$cont.table, 2, sum)>=10]
res.textual.viet <- textual(barbes.viet,num.text = 3, contingence.by = 1, sep.word = ";")
eff.viet <- as.data.frame(apply(res.textual.viet$cont.table, MARGIN = 2, FUN=sum))
# Tout les mots : 669 mots
words_selection.viet <- res.textual.viet$cont.table[,apply(res.textual.viet$cont.table, 2, sum)]
# S√©lection des mots qui apparaissent plus de 10 fois : 29
words_selection_sup10.viet <- res.textual.viet$cont.table[,apply(res.textual.viet$cont.table, 2, sum)>=10]
res.CA.en <- CA(words_selection.en, graph=FALSE)
#plot.CA(res.CA.en) -> illisible
res.CA.sup10.en <- CA(words_selection_sup10.en, graph=FALSE)
plot.CA(res.CA.sup10.en)
res.CA.viet <- CA(words_selection.viet, graph=FALSE)
# plot.CA(res.CA.viet) -> illisible
res.CA.sup10.viet <- CA(words_selection_sup10.viet, graph=FALSE)
plot.CA(res.CA.sup10.viet)
library(FactoMineR)
library(SensoMineR)
#import
GMO <- read.csv("data/gmo.csv", sep=';')
#transform into factor
for (i in 1:21)
{
GMO[, i] <- as.factor(GMO[, i])
}
#summary
summary(GMO)
#selection variable Political.Party and Position.Al.A
GMO.Al.A <- GMO[,c( "Political.Party","Position.Al.A")]
#or tidyverse version :
library(dplyr)
GMO.Al.A <- GMO %>% select(c( Political.Party,Position.Al.A,))
MCA(GMO, quali.sup=c(21) )
plotellipses(MCA(GMO),axes=c(1,2),level=0.99,keepvar=21)
plotellipses(MCA(GMO),axes=c(1,2),level=0.99)
MCAshiny(GMO)
git pull
library(tidyr)
df_theo <- as.data.frame.matrix(GMO_theo)
library(FactoMineR)
library(SensoMineR)
#import
GMO <- read.csv("data/gmo.csv", sep=';')
#transform into factor
for (i in 1:21)
{
GMO[, i] <- as.factor(GMO[, i])
}
#summary
summary(GMO)
#selection variable Political.Party and Position.Al.A
GMO.Al.A <- GMO[,c( "Political.Party","Position.Al.A")]
#or tidyverse version :
library(dplyr)
GMO.Al.A <- GMO %>% select(c( Political.Party,Position.Al.A,))
MCA(GMO, quali.sup=c(21) )
plotellipses(MCA(GMO),axes=c(1,2),level=0.99,keepvar=21)
plotellipses(MCA(GMO),axes=c(1,2),level=0.99)
>>>>>>> bb85babbc05571f0b46da432f65264a0683ee712
library(ggplot2)
ggplot(GMO.Al.A, aes(Position.Al.A, ..count..)) + geom_bar(aes(fill = Political.Party), color="black", position = "dodge") + ggtitle("Barplot of cross-categories") +
scale_fill_manual(values=c("Extrem Left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
## ..count.. : stat transformation of the original data set
library(ggplot2)
ggplot(GMO.Al.A, aes(Position.Al.A, ..count..)) + geom_bar(aes(fill = Political.Party), color="black", position = "dodge") + ggtitle("Barplot of cross-categories") +
scale_fill_manual(values=c("Extreme Left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
## ..count.. : stat transformation of the original data set
library(ggplot2)
ggplot(GMO.Al.A, aes(Position.Al.A, ..count..)) + geom_bar(aes(fill = Political.Party), color="black", position = "dodge") + ggtitle("Barplot of cross-categories") +
scale_fill_manual(values=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
## ..count.. : stat transformation of the original data set
library(tidyr)
df_theo <- as.data.frame.matrix(GMO_theo)
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot(t(as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques")
barplot(table(GMO.Al.A.Sample)/135, beside = TRUE,main="sample")
set.seed(7)
ind.sample <- sample(1:135)
GMO.Al.A.Sample <- data.frame("Position.Al.A"=GMO.Al.A$Position.Al.A[ind.sample],'Political.Party'=GMO.Al.A$Political.Party)
#visualization
ggplot(GMO.Al.A.Sample, aes(Position.Al.A, ..count..)) + geom_bar(aes(fill = Political.Party), color="black", position = "dodge") + ggtitle("Barplot of cross-categories sampled") +
scale_fill_manual(values=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot(t(as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques")
barplot(table(GMO.Al.A.Sample)/135, beside = TRUE,main="sample")
barplot(t(table(GMO.Al.A)/135), beside = TRUE,main="non sample")
library(tidyr)
df_theo <- as.data.frame.matrix(GMO_theo)
library(tibble)
df <- rownames_to_column(df_theo, "Political.Party")
df <- df %>% pivot_longer(!Political.Party, names_to="Position.Al.A", values_to = "frequence")
ggplot(df, aes(y=frequence,x=Position.Al.A, fill=Political.Party))+
geom_col( position = "dodge", color="black")+ggtitle("Barplot of theorical table")+
scale_fill_manual(values=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot(t(as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(table(GMO.Al.A.Sample)/135, beside = TRUE,main="sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(t(table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
<<<<<<< HEAD
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE,main="sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE,main="sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
legend("bottomleft", inset=.02, title="Number of Cylinders", horiz=TRUE, cex=0.8)
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE,main="sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
legend("bottomleft", inset=.02, title="Number of Cylinders", c("L","a","a",'aa','a'), horiz=TRUE, cex=0.8)
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE,main="sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
legend("topleft", inset=.02, title="Number of Cylinders", c("L","a","a",'aa','a'), horiz=TRUE, cex=0.8)
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE,main="sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
legend("topleft", inset=.02, title="Number of Cylinders", c("L","a","a",'aa','a'),col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc")), horiz=TRUE, cex=0.8, fill=)
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE,main="sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
legend("topleft", inset=.02, title="Number of Cylinders", c("L","a","a",'aa','a'), horiz=TRUE, cex=0.8, fill=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc")))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE,main="sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
legend("topleft", inset=.02, title="Number of Cylinders", c("L","a","a",'aa','a'), horiz=TRUE, cex=0.8, fill=c("Extreme left"="#bb0000","Left"="#FF8080","Liberal"="#ffeb00","Greens"="#3BA019","Right"="#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
par(mfrow=c(1,3))
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("#bb0000","#FF8080","#ffeb00","#3BA019","#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE, main="sample",col=c("#bb0000","#FF8080","#ffeb00","#3BA019","#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample", col=c("#bb0000","#FF8080","#ffeb00","#3BA019","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("#bb0000","#FF8080","#ffeb00","#3BA019","#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE, main="sample",col=c("#bb0000","#FF8080","#ffeb00","#3BA019","#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample", col=c("#bb0000","#FF8080","#ffeb00","#3BA019","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE, main="sample",col=c("#bb0000","#FF8080","#ffeb00","#3BA019","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample", col=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE, main="sample",col=("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
#We start by adding margins to have row and column profiles
GMO_table <- as.data.frame.matrix(table(GMO.Al.A))
fi <- apply(GMO_table, 1, sum)/sum(GMO_table)
fj <- apply(GMO_table, 2, sum)/sum(GMO_table)
GMO_theo <- matrix(nrow=5,ncol=4)
for(i in 1:5){
for(j in 1:4) GMO_theo[i, j] <- (fi[i]*fj[j])
}
rownames(GMO_theo) <- rownames(GMO_table)
colnames(GMO_theo) <- colnames(GMO_table)
#barplot
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE, main="sample", col=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample", col=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
legend("topleft", inset=.02, title="Political Party", c("Extreme left","Greens","Left",'Liberal','Right'), horiz=TRUE, cex=0.8, fill=c("#bb0000","#3BA019","#FF8080","#ffeb00","#0066cc"))
=======
barplot((as.table(as.matrix(GMO_theo))), beside = TRUE, main="effectifs theoriques", col=c("Extreme left" = "#4E001F", "Greens" = "#50C113", "Right" = "#0596FF", "Liberal"="#FFB400", "Left"="#DE3D53"))
barplot(t(table(GMO.Al.A.Sample))/135, beside = TRUE,main="sample", col=c("Extreme left" = "#4E001F", "Greens" = "#50C113", "Right" = "#0596FF", "Liberal"="#FFB400", "Left"="#DE3D53"))
barplot((table(GMO.Al.A)/135), beside = TRUE,main="non sample",col=c("Extreme left" = "#4E001F", "Greens" = "#50C113", "Right" = "#0596FF", "Liberal"="#FFB400", "Left"="#DE3D53"))
>>>>>>> ae9b73f6381064e14da8c909c2b9e6642cd12b00
>>>>>>> bb85babbc05571f0b46da432f65264a0683ee712
=======
>>>>>>> 3b0f9183149564b47b7444f9ca0540a566097d03
=======
experts <- read.csv(file = "data/perfumes_qda_experts.csv" )
experts <- read.table(file="data/perfumes_qda_experts.csv",header=TRUE, sep=",",quote="\"")
experts[1:5,1:8]
head(experts)
summary(experts)
experts$Product <- as.factor(experts$Product)
experts$Panelist <- as.factor(experts$Panelist)
experts$Session <- as.factor(experts$Session)
experts$Rank <- as.factor(experts$Rank)
head(experts)
levels(experts$Product)
levels(experts$Product)[4]
levels(experts$Product)[4] <- "Cin√É¬©ma"
levels(experts$Product)
for (j in 1:4) experts[,j] <- as.factor(experts[,j])
summary(experts)
x1 <- mean(experts$Spicy)
x2 <- quantile(experts$Spicy)
c(x1,x2)
loc.parameters <- data.frame("mean"=double(), "median"=double(), "q1"=double(), "q3"=double())
for (j in 5:16){
me <- mean(experts[,j])
med <- quantile(experts[,j], 0.5)
q1 <- quantile(experts[,j], 0.25)
q3 <- quantile(experts[,j], 0.75)
loc.parameters <- rbind(loc.parameters, c(me, med, q1, q3))
}
colnames(loc.parameters) <- c("mean", "median", "q1", "q3")
rownames(loc.parameters) <- colnames(experts[,5:16])
View(loc.parameters)
experts <- read.csv("data/perfumes_qda_experts.csv" )
experts <- read.csv(file="data/perfumes_qda_experts.csv" )
experts <- read.table(file="data/perfumes_qda_experts.csv", header=TRUE, sep=",", quote="\"")
experts[1:5,1:8]
head(experts)
summary(experts)
experts$Product <- as.factor(experts$Product)
experts$Panelist <- as.factor(experts$Panelist)
experts$Session <- as.factor(experts$Session)
experts$Rank <- as.factor(experts$Rank)
head(experts)
levels(experts$Product)
levels(experts$Product)[4]
levels(experts$Product)[4] <- "Cin√©ma"
levels(experts$Product)
for (j in 1:4) experts[,j] <- as.factor(experts[,j])
summary(experts)
x1 <- mean(experts$Spicy)
x2 <- quantile(experts$Spicy)
c(x1,x2)
loc.parameters <- data.frame("mean"=double(),"median"=double(),"q1"=double(),"q3"=double())
for (j in 5:16){
q1 <- quantile(experts[,j], probs=0.25)
med <- quantile(experts[,j], probs=0.5)
q3 <- quantile(experts[,j], probs=0.75)
me <- mean(experts[,j])
loc.parameters <- rbind(loc.parameters, c(q1,med,q3,me))
}
colnames(loc.parameters) <- c("q1","median","q3","mean")
rownames(loc.parameters) <- colnames(experts[,5:16])
loc.parameters
boxplot(experts$Fruity)
par(mfrow=c(1,3))
for (j in colnames(experts[,5:7])) boxplot(experts[,j],main=j)
par(mfrow=c(1,3))
for (j in colnames(experts[,5:7])){
boxplot(experts[,j],main=j)
abline(h=mean(experts[,j]))
}
experts$Spicy[experts$Spicy<=1]
length(experts$Spicy[experts$Spicy<=1])
experts$Spicy[1<experts$Spicy & experts$Spicy<=2]
length(experts$Spicy[1<experts$Spicy & experts$Spicy<=2])
hist(experts$Spicy)
hist(experts$Spicy, breaks=50)
hist(experts$Spicy, breaks=50, ylab="Number of occurences")
hist(experts$Spicy,
breaks=50,
probability=TRUE,
main="Distribution of the values for the Spicy attribute")
d <- density(experts$Spicy)
plot(d,main="Density of Spicy")
names(d)
plot(d$x,d$y,main="Density of Spicy")
library(ggplot2)
hist_spicy <- ggplot(experts) +
aes(x=Spicy) +
geom_histogram()
hist_spicy
ggplot(experts)+
aes(x=Spicy, y=..density..)+
geom_histogram(bins=50)
d <- density(experts$Vanilla)
i_mean <- which.max(d$x >= mean(experts$Vanilla))
pcum1 <- cumsum(d$y/sum(d$y))[i_mean]-0.15
pcum2 <- cumsum(d$y/sum(d$y))[i_mean]+0.15
x_1 <- which.max(cumsum(d$y/sum(d$y)) >= pcum1)
x_2 <- which.max(cumsum(d$y/sum(d$y)) >= pcum2)
d$x[x_1]
d$x[x_2]
plot(d, main="The notion of dispersion around the mean", type="l", lwd=2, col="blue")
polygon(c(d$x[x_1], d$x[x_1:x_2],d$x[x_2]), c(0,d$y[x_1:x_2],0), col='lightblue')
sd(experts$Fruity)
var(experts$Fruity)
sd(experts$Fruity)^2
>>>>>>> 8de8855803d88bb81e501b46a55ce1bf61c441e0
