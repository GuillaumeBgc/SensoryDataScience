abline(h=quantile(experts[,a], probs = 0.25))
text(0.75,quantile(experts[,a], probs = 0.75)+0.25, "q3", pos=2)
abline(h=quantile(experts[,a], probs = 0.75))
text(0.75,quantile(experts[,a], probs = 0.5)+0.25, "Median", pos=2)
abline(h=quantile(experts[,a], probs = 0.5))
}
layout(matrix(1:3,1,3))
for (a in 5:7){
boxplot(experts[,a], xlab=paste0("Boxplot of ", colnames(experts[a])))
text(0.75,mean(experts[,a])+0.25, "mean", pos=2)
abline(h=mean(experts[,a]))
text(0.75,quantile(experts[,a], probs = 0.25)+0.25, "q1", pos=2)
abline(h=quantile(experts[,a], probs = 0.25))
text(0.75,quantile(experts[,a], probs = 0.75)+0.25, "q3", pos=2)
abline(h=quantile(experts[,a], probs = 0.75))
text(0.75,quantile(experts[,a], probs = 0.5)+0.25, "Median", pos=2)
abline(h=quantile(experts[,a], probs = 0.5))
}
?text
layout(matrix(1:3,1,3))
for (a in 5:7){
boxplot(experts[,a], xlab=paste0("Boxplot of ", colnames(experts[a])))
# Mean
text(0.75,mean(experts[,a])+0.25, "mean", pos=2)
abline(h=mean(experts[,a]))
# Q1
text(0.75,quantile(experts[,a], probs = 0.25)+0.25, "q1", pos=2)
abline(h=quantile(experts[,a], probs = 0.25))
# Q3
text(0.75,quantile(experts[,a], probs = 0.75)+0.25, "q3", pos=2)
abline(h=quantile(experts[,a], probs = 0.75))
# Median
text(0.75,quantile(experts[,a], probs = 0.5)+0.25, "Median", pos=2)
abline(h=quantile(experts[,a], probs = 0.5))
}
layout(matrix(1:3,1,3))
for (a in 5:7){
boxplot(experts[,a], xlab=paste0("Boxplot of ", colnames(experts[a])))
# Mean
text(0.75,mean(experts[,a])+0.25, "mean", pos=2)
abline(h=mean(experts[,a]))
# Q1
text(0.75,quantile(experts[,a], probs = 0.25)+0.25, "q1", pos=2)
abline(h=quantile(experts[,a], probs = 0.25))
# Q3
text(0.75,quantile(experts[,a], probs = 0.75)+0.25, "q3", pos=2)
abline(h=quantile(experts[,a], probs = 0.75))
# Median
text(0.75,quantile(experts[,a], probs = 0.5)+0.25, "med", pos=2)
abline(h=quantile(experts[,a], probs = 0.5))
}
library(tidyverse)
perfumes <- perfumes %>% filter(Product=="Angel"|Product=="Chanel N5"|Product=="J'adore ET")
ggplot(perfumes)+aes(x=Floral, color=Product)+geom_density()
library(ggplot2)
library(dplyr)
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" ) %>%
# Add the mean's column
group_by(Product) %>%
mutate(mu=mean(Floral)) %>%
# Graph
ggplot() + aes(x=Floral, fill=Product) + geom_density(alpha=0.4) + geom_vline(aes(xintercept=mu, color=Product),linetype="dashed") + labs(title="Density of Spicy according three products")
ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot()
ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot()
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Spicy)) %>%
filter(Product == "Coco Mademoiselle" | Product == "Angel" | Product == "Chanel N5" ) %>%
# Graph
ggplot() + aes(x=Spicy, fill=Product) + geom_boxplot() + labs(title="Boxplot of Spicy according three products")
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Spicy)) %>%
filter(Product == "Coco Mademoiselle" | Product == "Angel" | Product == "Chanel N5" ) %>%
# Graph
ggplot() + aes(y=Floral, x= Product, color=Product)+geom_boxplot() + labs(title="Boxplot of Spicy according three products")
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "Coco Mademoiselle" | Product == "Angel" | Product == "Chanel N5" ) %>%
# Graph
ggplot() + aes(y=Floral, x= Product, color=Product)+geom_boxplot() + labs(title="Boxplot of Spicy according three products")
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "Coco Mademoiselle" | Product == "Angel" | Product == "Chanel N5" ) %>%
# Graph
ggplot() + aes(y=Floral, x= Product, fill=Product)+geom_boxplot() + labs(title="Boxplot of Spicy according three products")
ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
library("gridExtra")
A1 <- ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A2 <- ggplot(perfumes)+aes(y=Vanilla, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A3 <- ggplot(perfumes)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(A1, A2, A3, ncol=2, nrow = 2)
library("gridExtra")
A1 <- ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A2 <- ggplot(perfumes)+aes(y=Vanilla, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A3 <- ggplot(perfumes)+aes(y=Citrus, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(A1, A2, A3, ncol=2, nrow = 2)
perfumes$Vanilla <- perfumes$Vanilla/sd(perfumes$Vanilla)
perfumes$Floral <- perfumes$Floral/sd(perfumes$Floral)
perfumes$Citrus <- perfumes$Citrus/sd(perfumes$Citrus)
library("gridExtra")
A1 <- ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A2 <- ggplot(perfumes)+aes(y=Vanilla, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
A3 <- ggplot(perfumes)+aes(y=Citrus, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(A1, A2, A3, ncol=2, nrow = 2)
Mean_Attributes <- perfumes %>% group_by(Product) %>% summarise(
mean_Vanilla=mean(Vanilla),
mean_Citrus=mean(Citrus),
mean_Floral=mean(Floral)
)
matrix_Floral <- as.matrix(dist(Mean_Attributes$mean_Floral))
matrix_Citrus <- as.matrix(dist(Mean_Attributes$mean_Citrus))
matrix_Vanilla <- as.matrix(dist(Mean_Attributes$mean_Vanilla))
A1A2<-ggplot(Mean_Attributes)+aes(x = mean_Vanilla, y=mean_Floral, color=Product)+geom_path(aes(group=1),color="black")+geom_point()
A2A3<-ggplot(Mean_Attributes)+aes(x = mean_Floral, y=mean_Citrus, color=Product)+geom_path(aes(group=1),color="black")+geom_point()
A1A3<-ggplot(Mean_Attributes)+aes(x = mean_Vanilla, y=mean_Citrus, color=Product)+geom_path(aes(group=1), color="black")+geom_point()
grid.arrange(A1A2, A2A3, A1A3, ncol=2, nrow = 2)
ggplot(experts)+aes(y=Floral, x= Product, color=Product) + geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
ggplot(perfumes)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" ) %>%
ggplot(experts)+aes(y=Floral, x= Product, color=Product) + geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" ) %>%
ggplot()+aes(y=Floral, x= Product, color=Product) + geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
experts %>%
# Select 3 products and 1 sensory attribute
select(c(Product, Floral)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" ) %>%
ggplot()+aes(y=Floral, x= Product, fill=Product) + geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
layout(matrix(1:3,1,3))
# First sensory attribute
ggplot(experts)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
ggplot(experts)+aes(y=Vanilla, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
ggplot(experts)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(gridExtra)
# First sensory attribute
a1 <- ggplot(experts)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(experts)+aes(y=Vanilla, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(experts)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3, ncol=2, nrow = 2)
library(gridExtra)
# First sensory attribute
a1 <- ggplot(experts)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(experts)+aes(y=Vanilla, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(experts)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3, ncol=2, nrow = 2)
a1
a2
a3
library(gridExtra)
# First sensory attribute
a1 <- ggplot(experts)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(experts)+aes(y=Vanilla, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(experts)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3, ncol=3, nrow = 1)
ggplot(experts)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
View(perfumes)
library(gridExtra)
# Select three sensory attributes and three products
df <- experts %>%
select(c(Product, Floral, Citrus, Spicy)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" )
# First sensory attribute
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(df)+aes(y=Vanilla, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3, ncol=3, nrow = 1)
library(gridExtra)
# Select three sensory attributes and three products
df <- experts %>%
select(c(Product, Floral, Citrus, Spicy)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" )
# First sensory attribute
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3, ncol=3, nrow = 1)
library(gridExtra)
# Select three sensory attributes and three products
df <- experts %>%
select(c(Product, Floral, Citrus, Spicy)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" )
# First sensory attribute
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3, ncol=2, nrow = 2)
library(gridExtra)
# Select three sensory attributes and three products
df <- experts %>%
select(c(Product, Floral, Citrus, Spicy, Heady)) %>%
filter(Product == "J'adore ET" | Product == "Angel" | Product == "Chanel N5" )
# First sensory attribute
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Fourth sensory attribute
a4 <- ggplot(df)+aes(y=Heady, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3,a4, ncol=2, nrow = 2)
ggplot(df)+aes(y=Spicy, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")
ggplot(df)+aes(y=Spicy, x= Product, color=Product)+geom_boxplot() +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# First sensory attribute
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
# Delete the x-axis:
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second sensory attribute
a2 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third sensory attribute
a3 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Fourth sensory attribute
a4 <- ggplot(df)+aes(y=Heady, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3,a4, ncol=2, nrow = 2)
Mean_Attributes <- perfumes %>% group_by(Product) %>% summarise(
mean_Vanilla=mean(Vanilla),
mean_Citrus=mean(Citrus),
mean_Floral=mean(Floral)
)
matrix_Floral <- as.matrix(dist(Mean_Attributes$mean_Floral))
matrix_Citrus <- as.matrix(dist(Mean_Attributes$mean_Citrus))
matrix_Vanilla <- as.matrix(dist(Mean_Attributes$mean_Vanilla))
matrix_Floral
View(Mean_Attributes)
means <- df %>% group_by(Product) %>% summarise(
mean_Spicy=mean(Spicy),
mean_Citrus=mean(Citrus),
mean_Floral=mean(Floral)
)
View(means)
spicy.matrix <- as.matrix(dist(means$mean_Spicy))
citrus.matrix <- as.matrix(dist(means$mean_Citrus))
floral.matrix <- as.matrix(dist(means$mean_Floral))
ggplot(Mean_Attributes)+aes(x = mean_Vanilla, y=mean_Floral, color=Product)+geom_point()
ggplot(Mean_Attributes)+aes(x = mean_Vanilla, y=mean_Floral, color=Product)+geom_line()
A1A2<-ggplot(Mean_Attributes)+aes(x = mean_Vanilla, y=mean_Floral, color=Product)+geom_path(aes(group=1),color="black")+geom_point()
A2A3<-ggplot(Mean_Attributes)+aes(x = mean_Floral, y=mean_Citrus, color=Product)+geom_path(aes(group=1),color="black")+geom_point()
A1A3<-ggplot(Mean_Attributes)+aes(x = mean_Vanilla, y=mean_Citrus, color=Product)+geom_path(aes(group=1), color="black")+geom_point()
grid.arrange(A1A2, A2A3, A1A3, ncol=2, nrow = 2)
df$Floral <- df$Floral/sd(df$Floral)
df$Citrus <- df$Citrus/sd(df$Citrus)
df$Spicy <- df$Spicy/sd(df$Spicy)
df$Heady <- df$Heady/sd(df$Heady)
a1 <- ggplot(df)+aes(y=Floral, x= Product, color=Product)+
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
a2 <- ggplot(df)+aes(y=Citrus, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
a3 <- ggplot(df)+aes(y=Spicy, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
a4 <- ggplot(perfumes)+aes(y=Heady, x= Product, color=Product) +
stat_summary(fun=mean, geom="line", aes(group=1), color="black") +
stat_summary(fun=mean, geom="point")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
grid.arrange(a1, a2, a3, a4, ncol=2, nrow = 2)
cbind(matrix(2,2), matrix(2,2))
